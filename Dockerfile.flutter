# syntax=docker/dockerfile:1
ARG FLUTTER_VERSION=3.32.5

# ========================================
# Stage 1: Flutter SDK Base
# ========================================
FROM debian:bookworm-slim AS flutter-base

# 基本パッケージインストール
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
    curl \
    git \
    unzip \
    xz-utils \
    zip \
    ca-certificates \
    openssh-client \
    clang \
    cmake \
    ninja-build \
    pkg-config \
    libgtk-3-dev \
    liblzma-dev \
    libstdc++-12-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Flutter SDKインストール
ARG FLUTTER_VERSION
ENV FLUTTER_HOME=/opt/flutter \
    PATH="/opt/flutter/bin:$PATH"

RUN git clone --depth 1 --branch ${FLUTTER_VERSION} https://github.com/flutter/flutter.git ${FLUTTER_HOME} && \
    flutter precache --web --no-android --no-ios --no-linux --no-windows --no-macos && \
    flutter config --no-analytics --no-cli-animations && \
    flutter doctor -v

# ========================================
# Stage 2: Dependencies builder
# ========================================
FROM flutter-base AS dependencies

WORKDIR /app

# pubspec.yaml関連のコピー（存在チェック付き）
COPY flutterapp/pubspec.* ./

# Flutter packages get（pubspec.yamlが存在する場合のみ）
RUN if [ -f pubspec.yaml ]; then \
      flutter pub get; \
    else \
      echo "pubspec.yaml not found, skipping flutter pub get"; \
    fi

# ========================================
# Stage 3: Development image
# ========================================
FROM flutter-base AS development

# 開発用追加パッケージ
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
    vim \
    less \
    net-tools \
    procps \
    chromium && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Flutter Web開発設定
ENV CHROME_EXECUTABLE=/usr/bin/chromium \
    FLUTTER_WEB_PORT=8080 \
    FLUTTER_WEB_HOSTNAME=0.0.0.0

WORKDIR /app

# pub-cacheの設定
ENV PUB_CACHE=/root/.pub-cache
RUN mkdir -p ${PUB_CACHE}

# Dependencies from builder（存在する場合のみ）
COPY --from=dependencies /app/.dart_tool* /app/.dart_tool
COPY --from=dependencies /root/.pub-cache* /root/.pub-cache

# エントリポイントスクリプトコピー
COPY script/flutter-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/flutter-entrypoint.sh

# ポート公開
EXPOSE 8080 9100

# エントリポイント設定
ENTRYPOINT ["/usr/local/bin/flutter-entrypoint.sh"]
CMD ["flutter", "run", "-d", "web-server", "--web-hostname=0.0.0.0", "--web-port=8080"]

# ========================================
# Stage 4: Web builder (production)
# ========================================
FROM flutter-base AS web-builder

WORKDIR /app

# アプリケーションコード全体をコピー
COPY flutterapp/ ./

# Flutter Web ビルド（本番用）
RUN if [ -f pubspec.yaml ]; then \
      flutter pub get && \
      flutter build web --release --web-renderer=canvaskit; \
    else \
      echo "Flutter app not found, skipping build"; \
      mkdir -p build/web && \
      echo '<!DOCTYPE html><html><body>Flutter app not initialized</body></html>' > build/web/index.html; \
    fi

# ========================================
# Stage 5: Production web server
# ========================================
FROM nginx:alpine AS production

# Nginxの設定
RUN rm /etc/nginx/conf.d/default.conf
COPY --from=web-builder /app/build/web /usr/share/nginx/html

# Nginx設定ファイル作成
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name _;
    
    root /usr/share/nginx/html;
    index index.html;
    
    # gzip圧縮
    gzip on;
    gzip_types text/plain application/javascript text/css application/json;
    
    # キャッシュ設定
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # SPAのためのフォールバック
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
}
EOF

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]